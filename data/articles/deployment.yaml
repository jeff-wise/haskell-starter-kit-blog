
---
title: Deploying Your Blog and Beyond
time_created: 2017-10-23T00:00:00Z
body: |+
  
  *A blog isn't really a blog if no one can read it. In this chapter, we'll 
  lay out some simple steps you can take to deploy your blog on one of three 
  platforms. You're blog will be live in as little as fifteen minutes, but 
  beware: the training wheels are off. This is the beginning of the end. 
  You'll be on your own once this chapter ends.*

  **Writing good code** is something to be proud of. It takes time. There
  are the never-ending seconds between when you hit compile and when the 
  entire application spins up or refreshes; the slow minutes refactoring 
  dumb mistakes from eons past or just 20 minutes ago; the frustrating 
  hours spent chasing an error through byzantine code paths; and 
  the arduous days pushing yourself to finish a feature that was 
  more complex than you could have imagined.

  **Building great applications** is something to be proud of. It takes effort. 
  There is the perseverance, working every day through the successes and 
  the failures, keeping the end goal in mind; the ambition, needed to push 
  yourself past barriers taller and harder than you've seen before, 
  learning new concepts and new tools along the way; the courage to put your 
  heart into something, knowing that it might ulmitately fail; and the 
  passion that brings you joy, and the energy, ambition and courage to 
  do it all again, each and every day.
 
  **Deploying software** is like getting a puppy. It's what you always 
  wanted, but you never realized how much work it really takes.
 
  You need to train it, feed it, walk it, cuddle with it, play with it, 
  give it medicine when it's sick, and discipline it when it eats the food 
  you left on the table.

  And of course, you'll have to deal with a lot of <span class="poop"> ðŸ’© </span>

  You have to do all of these things, almost every day, even when you're 
  tired, and especially when it's in need.

  Let's take a break from our puppy analogy and think about our blog. How 
  do we take care of a web application? What are some of things we might 
  want to do? Here is a brief, in-complete list of some common tasks:

    * Create a process for updating the application.
    * Restart it if it dies (or replicate it so it doesn't).
    * Keep backups of the data.
    * Be vigilant of security vulnerabilities.
    * Upgrade the hardware if it needs more memory or processing power.
    * Optimize the code if the hardware gets expensive.
    * Log errors, track feedback, and manage improvements.
    * Market your product and get new users
    * Give it a treat when it does something good. (Ok, maybe this is
       just for puppies)

  Unfortunately, no matter how much work you put into taking care of
  your blog or web application, it will, from time to time, nip 
  you on the ankle or knock you on your back, leaving a bruise.
  
  That's OK -- you'll get back up and learn from your mistakes. Just like 
  puppies, things will get messy, but in the end it will be worth all 
  of the trouble.

  The fun has just begun.

  ### The Fun Part

  This chapter contains the steps to deploy your blog on a few different 
  platforms. Naturally, it's less opinionated than the previous chapters. 
  Ultimately, this part is up to you. How you deploy your application will 
  depend a lot on the specific requirements and constraints you have 
  ranging from hosting preferences, performance demands, or financial 
  limitations.

  The steps here are intended to be basic and extendable. They require a 
  lot of manual work, with plenty of room for automation. Because this isn't 
  a book on automating deployment processes, we won't make any recommendations 
  here. There are just too many approaches you could take as far as 
  development processes (e.g. Continous Development), tools (e.g. CircleCI, GitLab), 
  or platforms (e.g. AWS). The training wheels are off -- you will have 
  to evaluate these resources and determine what is right for you and 
  your application. 

  Just for fun, here are some example scenarios you may want to consider, 
  just to demonstrate the spectrum of what is possible.

  #### The Minimalist
  
  Your blog is working locally, and you have your 
  server setup, but you just don't feel like dealing with a non-trivial 
  deployment process. You decide that your blog will only ever be a 
  blog -- it won't grow into a more complex application. Then, you realize that 
  your articles are saved in Git, so you don't really need persistence. 
  If the server somehow dies, you'll just restart it and refresh it with 
  the data stored in the Git repository. That's when you decide to just scrap 
  the database -- you get rid of the database Docker files, remove the 
  database-specific deployment scripts, and delete all of that ugly 
  database code. 

  Now you have only what you need: a web server to serve your articles 
  over HTTP as HTML documents, and your articles, written in Markdown.

  #### The Nihilist

  Of course, if you really want, you can pre-render the articles in HTML, 
  put them in a directory, and run a web server like nginx on that 
  directory. Then, you can delete most of the code except for the HTML 
  functions. You might want to put those functions into a simple script, 
  like the dev.hs script, and write some simple bash scripts to 
  glue everything together.

  Though if you want to do that, chances are you aren't very interested 
  in this tutorial. Minimalism is great, but if it's not too hard to 
  serve dynamic content over HTTP and persist it in a database, why not? 
  Then when you want to go bigger, you're already half way there.

  #### The Pragmatist
  
  When you look at the list of all the things you'll need to manage after 
  you deploy your blog, a good deal of them will have to do with the 
  database. The database tasks may also be more difficult than the others. 
  Databases are complicated pieces of software, and ensuring that your 
  data is always available in the event of too many requests or 
  hardware failure can be challenging. 

  Managed databases provide a great solution to these problems, especially 
  when you have a small team. Like the minimalist, you'll be able to 
  remove some database deployment scripts, but the code should still work. 
  You'll have to figure out your new development processes with the 
  managed database, likely seeing the addition of some incidental 
  complexity. But you'll be able to scale your data and sleep better at night. 

  #### The Guru
  
  You've read the Haskell Blog Tutorial and deployed your blog. Only a few 
  weeks have passed, and you already have a million followers waiting 
  to read your next insight. The blog turns into a community and the community 
  turns into a platform. You have articles, streaming videos, and chat. 
  A single server can no longer handle the traffic, and there is too much 
  data in the database, causing queries to run for seconds.

  This tutorial includes steps to deploy your blog on Kubernetes, so 
  you start there. You're able to replicate the web servers with ease so 
  you can handle more traffic. But your database is stil sluggish. You look 
  into high avaialability replication setups with PostgreSQL and even other 
  databases that are designed to be distributed like Cassandra. You pick 
  one and it works, after a good deal of work. But the codebase is still a 
  mess and your engineers can't work efficiently, so you hire some qualified 
  engineerers with fancy engineering hats who tell you how to modularize 
  you codebase with microservices on Kubernetes. 

  A year goes by, and everything works. There are some hiccups, now and then, 
  but it really does work. You buy your engineers some hats even more ostentatious 
  than the ones they had before, check your bank account and walk home. Thinking 
  back, your long for the days when things were not so complicated, when like 
  The Nihilist, you could just copy some HTML files onto a server and 
  call it a day.

  ## Using Digital Ocean
  
  ### Setup
  
  <h4 class="step">
    <span class="number">1</span>
    <span class="step">Create a Docker Droplet</span>
  </h4>

  A droplet is 
  Digital Ocean's name for a virtual server on its platform. We need a 
  server with Docker installed so that we can run our application using Docker 
  containers, the same way that we do in our local environment.

  Digital Ocean provides servers that come pre-installed with different software. 
  We will take advantage of the Ubuntu server that comes pre-installed with 
  Docker. That way, all we need to do is create the Droplet, and we will be 
  ready to run our blog.
  
  You will of course need to create an account with Digital Ocean. This is 
  also a good time to [setup SSH keys](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets), 
  if you would like to do so. Configuring SSH with Digtial Ocean now with ensure 
  that you can log on to your droplet we are going to create via SSH with no 
  extra steps involved.

  Next, navigate to the page on the Digital Ocean website where you can create a 
  droplet. 

  Where it says <span class="hl-soft">Choose an image</span> select the tab 
  called <span class="hl-soft">One-click apps</span>. Then select the box 
  labeled <span class="hl-soft">Docker X.Y.Z on A.B</span>.

  ![Select Docker droplet option.](/images/3)

  The remaining options are up to you. Here are a few recommendations:

    * The $5 droplet size is more than sufficient for running a blog.
    * You don't need block storage.
    * Choose a datacenter region near you.
    * Under <span class="hl-soft">Add your SSH keys</span> click the 
      <span class="hl-soft">General</span> checkbox if you've added an SSH 
      key to your account and would like to use it logon on to the droplet.
    * Choose a fun hostname. You only live once, after all. I like to use 
      the names of Adventure Time characters for my droplets.

  <h4 class="step">
    <span class="number">2</span>
    <span class="step">Create a Docker Cloud Repository</span>
  </h4>

  Docker Cloud is Docker's premium service for managing Docker
  images and containers. In this tutorial we only use it as a 
  means to share our images between our computer and the server. 
  Generally, it's useful to have the images persisted somewhere where
  they may be easily accessed. You may want to use old images that were
  lost, access them from a different computer, or allow other team
  members to use them.

  Docker Cloud organizes images into repositories
  It's free to use for one private repository as well as unlimited public 
  repositories. If you don't want to use Docker Cloud, and aren't
  concerned about any of the benefits we just listed, feel free to copy
  the images manually:

  ```bash
  docker save <image> | bzip2 | pv | ssh user@host 'bunzip2 | docker load'
  ```

  It's good to remember that you almost never *need* to use an official
  service to acheive a goal in programming. It's also good to remember
  that your time is often more valuable than you think, and a few
  dollars can go a long way.

  To push our images to the server, you'll need a Docker Cloud account
  and a repository. If you already have both, you can continue on to 
  [Step 1](#tag-your-docker-images). Otherwise, it will only take you
  a few steps to create an account and repository:

    1. If you don't already have a Docker Cloud account, create one
       [here](https://cloud.docker.com/).
    2. Once you are logged in to Docker Cloud, follow the 
       [instructions for creating a repository](https://docs.docker.com/docker-cloud/builds/repos/).

  You should end up with a dashboard view of your new repository. We will 
  come back to this screen later.

  ![Docker Cloud Haskell Blog Tutorial Repository](/images/4)

  <h4 class="step">
    <span class="number">3</span>
    <span class="step">Logon to Your Droplet</span>
  </h4>

  You will need to access your server's bash terminal in order to run 
  execute the steps required to run the application. If you're not sure how, 
  follow these [instructions](do-lhttps://www.digitalocean.com/community/tutorials/how-to-connect-to-your-droplet-with-ssh) 
  to get started.

  <h4 class="step">
    <span class="number">4</span>
    <span class="step">Configure DNS</span>
  </h4>

  You'll probably want to host your blog under a domain name that you purchased, 
  like myhaskellblogname.com.

  Once you have a domain name, it will only take a [few steps](do-dns) to get everything configured. 

  ### Deploy

  <h4 class="step">
    <span class="number">1</span>
    <span class="step">Tag Your Docker Images</span>
  </h4>

  Before we do anything official with our images, we should tag them
  with a version number. This will prevent us from confusing images that
  belong to different versions of our application. 

  Just as with version control, it's not very common to go back to
  a previous revision, but when you need to, you're glad that it's
  there. Likewise, there are benefits to archiving previous versions of
  our application. For example, if something were to go wrong with our web
  server, we could always stop the running container and deploy
  a container for the image of the version that was last functioning
  correctly. We don't have to checkout a previous commit in version
  control, recompile anything, or even copy any files. It can all be
  done with Docker.

  Use the `docker tag` command to tag your images. Of course, make
  sure that you tag the images you want to deploy and update the
  version numbers accordingly. For example:

  `docker tag b0b6fdfe0115 haskell-blog-tutorial/db:1.0`

  `docker tag f77652c4b03e haskell-blog-tutorial/web:1.0`

  <h4 class="step">
    <span class="number">2</span>
    <span class="step">Push the Images to Docker Hub</span>
  </h4>

  Following the instructions to [push images to Docker
  Hub](docker-cloud-push). If it tells you to tag the image, you can
  skip that step, since we just did that.

  Verify that your images have been uploaded, and then continue to the
  next step, where we'll log on to the server. 

  <h4 class="step">
    <span class="number">3</span>
    <span class="step">Pull the Images to Your Droplet</span>
  </h4>

  You will need the
  namespace (your account name), the name of the repository, and
  the tag. Just check your local images or the repository if you've
  forgotten.
   
  `docker pull jeffscottwise/haskell-blog-tutorial:db-1.0`

  `docker pull jeffscottwise/haskell-blog-tutorial:web-1.0`


  <h4 class="step">
    <span class="number">4</span>
    <span class="step">Run the Application</span>
  </h4>

  Once again, we'll take a more manual approach to running the
  application so you can make your own adjustments and automations
  based on your specific needs.

  We'll run the containers for the database and webserver using the
  `docker run` command. Since <span class="hl-soft">port 80</span> should be open by default on your
  droplet, you'll be able to access your application through a web
  browser as soon as the containers are up.
    
  First, we will start the database container, and then we will 
  start the web server container. As before, you will need to substitute your own 
  image names, unless you are using the official Haskell Blog Tutorial images.

  ```bash
  docker run -d --name blog-db --net=blog jeffscottwise/haskell-blog-tutorial:db-0.7.0 
  ```

  ```bash
  docker run -d --name blog-web --net=blog -p 80:80 jeffscottwise/haskell-blog-tutorial:web-0.7.0 
  ```


  <h4 class="step">
    <span class="number">5</span>
    <span class="step">Make Sure it Works</span>
  </h4>

  Open a web browser and enter the IP address of the docker droplet. You 
  should see your blog homepage!




  ## Amazon ECS

  TODO

  ## Kubernetes (Google Container Engine)

  TODO


